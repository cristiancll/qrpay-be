// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: sku.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SKUServiceClient is the client API for SKUService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SKUServiceClient interface {
	Create(ctx context.Context, in *SKUCreateRequest, opts ...grpc.CallOption) (*SKUCreateResponse, error)
	Get(ctx context.Context, in *SKUGetRequest, opts ...grpc.CallOption) (*SKUGetResponse, error)
	Update(ctx context.Context, in *SKUUpdateRequest, opts ...grpc.CallOption) (*SKUUpdateResponse, error)
	Delete(ctx context.Context, in *SKUDeleteRequest, opts ...grpc.CallOption) (*SKUDeleteResponse, error)
	List(ctx context.Context, in *SKUListRequest, opts ...grpc.CallOption) (*SKUListResponse, error)
}

type sKUServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSKUServiceClient(cc grpc.ClientConnInterface) SKUServiceClient {
	return &sKUServiceClient{cc}
}

func (c *sKUServiceClient) Create(ctx context.Context, in *SKUCreateRequest, opts ...grpc.CallOption) (*SKUCreateResponse, error) {
	out := new(SKUCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.SKUService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKUServiceClient) Get(ctx context.Context, in *SKUGetRequest, opts ...grpc.CallOption) (*SKUGetResponse, error) {
	out := new(SKUGetResponse)
	err := c.cc.Invoke(ctx, "/proto.SKUService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKUServiceClient) Update(ctx context.Context, in *SKUUpdateRequest, opts ...grpc.CallOption) (*SKUUpdateResponse, error) {
	out := new(SKUUpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.SKUService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKUServiceClient) Delete(ctx context.Context, in *SKUDeleteRequest, opts ...grpc.CallOption) (*SKUDeleteResponse, error) {
	out := new(SKUDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.SKUService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKUServiceClient) List(ctx context.Context, in *SKUListRequest, opts ...grpc.CallOption) (*SKUListResponse, error) {
	out := new(SKUListResponse)
	err := c.cc.Invoke(ctx, "/proto.SKUService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SKUServiceServer is the server API for SKUService service.
// All implementations must embed UnimplementedSKUServiceServer
// for forward compatibility
type SKUServiceServer interface {
	Create(context.Context, *SKUCreateRequest) (*SKUCreateResponse, error)
	Get(context.Context, *SKUGetRequest) (*SKUGetResponse, error)
	Update(context.Context, *SKUUpdateRequest) (*SKUUpdateResponse, error)
	Delete(context.Context, *SKUDeleteRequest) (*SKUDeleteResponse, error)
	List(context.Context, *SKUListRequest) (*SKUListResponse, error)
	mustEmbedUnimplementedSKUServiceServer()
}

// UnimplementedSKUServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSKUServiceServer struct {
}

func (UnimplementedSKUServiceServer) Create(context.Context, *SKUCreateRequest) (*SKUCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSKUServiceServer) Get(context.Context, *SKUGetRequest) (*SKUGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSKUServiceServer) Update(context.Context, *SKUUpdateRequest) (*SKUUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSKUServiceServer) Delete(context.Context, *SKUDeleteRequest) (*SKUDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSKUServiceServer) List(context.Context, *SKUListRequest) (*SKUListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSKUServiceServer) mustEmbedUnimplementedSKUServiceServer() {}

// UnsafeSKUServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SKUServiceServer will
// result in compilation errors.
type UnsafeSKUServiceServer interface {
	mustEmbedUnimplementedSKUServiceServer()
}

func RegisterSKUServiceServer(s grpc.ServiceRegistrar, srv SKUServiceServer) {
	s.RegisterService(&SKUService_ServiceDesc, srv)
}

func _SKUService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SKUCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKUServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SKUService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKUServiceServer).Create(ctx, req.(*SKUCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKUService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SKUGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKUServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SKUService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKUServiceServer).Get(ctx, req.(*SKUGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKUService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SKUUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKUServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SKUService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKUServiceServer).Update(ctx, req.(*SKUUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKUService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SKUDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKUServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SKUService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKUServiceServer).Delete(ctx, req.(*SKUDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKUService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SKUListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKUServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SKUService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKUServiceServer).List(ctx, req.(*SKUListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SKUService_ServiceDesc is the grpc.ServiceDesc for SKUService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SKUService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SKUService",
	HandlerType: (*SKUServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SKUService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SKUService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SKUService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SKUService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SKUService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sku.proto",
}
