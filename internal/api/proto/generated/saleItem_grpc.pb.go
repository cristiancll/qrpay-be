// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: saleItem.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaleItemServiceClient is the client API for SaleItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleItemServiceClient interface {
	Create(ctx context.Context, in *SaleItemCreateRequest, opts ...grpc.CallOption) (*SaleItemCreateResponse, error)
	Update(ctx context.Context, in *SaleItemUpdateRequest, opts ...grpc.CallOption) (*SaleItemUpdateResponse, error)
	Delete(ctx context.Context, in *SaleItemDeleteRequest, opts ...grpc.CallOption) (*SaleItemDeleteResponse, error)
	Get(ctx context.Context, in *SaleItemGetRequest, opts ...grpc.CallOption) (*SaleItemGetResponse, error)
	List(ctx context.Context, in *SaleItemListRequest, opts ...grpc.CallOption) (*SaleItemListResponse, error)
}

type saleItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleItemServiceClient(cc grpc.ClientConnInterface) SaleItemServiceClient {
	return &saleItemServiceClient{cc}
}

func (c *saleItemServiceClient) Create(ctx context.Context, in *SaleItemCreateRequest, opts ...grpc.CallOption) (*SaleItemCreateResponse, error) {
	out := new(SaleItemCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleItemService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleItemServiceClient) Update(ctx context.Context, in *SaleItemUpdateRequest, opts ...grpc.CallOption) (*SaleItemUpdateResponse, error) {
	out := new(SaleItemUpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleItemService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleItemServiceClient) Delete(ctx context.Context, in *SaleItemDeleteRequest, opts ...grpc.CallOption) (*SaleItemDeleteResponse, error) {
	out := new(SaleItemDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleItemService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleItemServiceClient) Get(ctx context.Context, in *SaleItemGetRequest, opts ...grpc.CallOption) (*SaleItemGetResponse, error) {
	out := new(SaleItemGetResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleItemService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleItemServiceClient) List(ctx context.Context, in *SaleItemListRequest, opts ...grpc.CallOption) (*SaleItemListResponse, error) {
	out := new(SaleItemListResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleItemService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleItemServiceServer is the server API for SaleItemService service.
// All implementations must embed UnimplementedSaleItemServiceServer
// for forward compatibility
type SaleItemServiceServer interface {
	Create(context.Context, *SaleItemCreateRequest) (*SaleItemCreateResponse, error)
	Update(context.Context, *SaleItemUpdateRequest) (*SaleItemUpdateResponse, error)
	Delete(context.Context, *SaleItemDeleteRequest) (*SaleItemDeleteResponse, error)
	Get(context.Context, *SaleItemGetRequest) (*SaleItemGetResponse, error)
	List(context.Context, *SaleItemListRequest) (*SaleItemListResponse, error)
	mustEmbedUnimplementedSaleItemServiceServer()
}

// UnimplementedSaleItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSaleItemServiceServer struct {
}

func (UnimplementedSaleItemServiceServer) Create(context.Context, *SaleItemCreateRequest) (*SaleItemCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSaleItemServiceServer) Update(context.Context, *SaleItemUpdateRequest) (*SaleItemUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSaleItemServiceServer) Delete(context.Context, *SaleItemDeleteRequest) (*SaleItemDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSaleItemServiceServer) Get(context.Context, *SaleItemGetRequest) (*SaleItemGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSaleItemServiceServer) List(context.Context, *SaleItemListRequest) (*SaleItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSaleItemServiceServer) mustEmbedUnimplementedSaleItemServiceServer() {}

// UnsafeSaleItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleItemServiceServer will
// result in compilation errors.
type UnsafeSaleItemServiceServer interface {
	mustEmbedUnimplementedSaleItemServiceServer()
}

func RegisterSaleItemServiceServer(s grpc.ServiceRegistrar, srv SaleItemServiceServer) {
	s.RegisterService(&SaleItemService_ServiceDesc, srv)
}

func _SaleItemService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleItemCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleItemServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleItemService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleItemServiceServer).Create(ctx, req.(*SaleItemCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleItemService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleItemUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleItemServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleItemService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleItemServiceServer).Update(ctx, req.(*SaleItemUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleItemService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleItemDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleItemServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleItemService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleItemServiceServer).Delete(ctx, req.(*SaleItemDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleItemService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleItemGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleItemServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleItemService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleItemServiceServer).Get(ctx, req.(*SaleItemGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleItemService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleItemServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleItemService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleItemServiceServer).List(ctx, req.(*SaleItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleItemService_ServiceDesc is the grpc.ServiceDesc for SaleItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SaleItemService",
	HandlerType: (*SaleItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SaleItemService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SaleItemService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SaleItemService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SaleItemService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SaleItemService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saleItem.proto",
}
