// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: sale.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaleServiceClient is the client API for SaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleServiceClient interface {
	Create(ctx context.Context, in *SaleCreateRequest, opts ...grpc.CallOption) (*SaleCreateResponse, error)
	Get(ctx context.Context, in *SaleGetRequest, opts ...grpc.CallOption) (*SaleGetResponse, error)
	List(ctx context.Context, in *SaleListRequest, opts ...grpc.CallOption) (*SaleListResponse, error)
	Update(ctx context.Context, in *SaleUpdateRequest, opts ...grpc.CallOption) (*SaleUpdateResponse, error)
	Delete(ctx context.Context, in *SaleDeleteRequest, opts ...grpc.CallOption) (*SaleDeleteResponse, error)
	ListSaleItemsByUser(ctx context.Context, in *ListSaleItemsByUserRequest, opts ...grpc.CallOption) (*ListSaleItemsByUserResponse, error)
	ListAvailableSaleItemsByUser(ctx context.Context, in *ListAvailableSaleItemsByUserRequest, opts ...grpc.CallOption) (*ListAvailableSaleItemsByUserResponse, error)
}

type saleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleServiceClient(cc grpc.ClientConnInterface) SaleServiceClient {
	return &saleServiceClient{cc}
}

func (c *saleServiceClient) Create(ctx context.Context, in *SaleCreateRequest, opts ...grpc.CallOption) (*SaleCreateResponse, error) {
	out := new(SaleCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Get(ctx context.Context, in *SaleGetRequest, opts ...grpc.CallOption) (*SaleGetResponse, error) {
	out := new(SaleGetResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) List(ctx context.Context, in *SaleListRequest, opts ...grpc.CallOption) (*SaleListResponse, error) {
	out := new(SaleListResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Update(ctx context.Context, in *SaleUpdateRequest, opts ...grpc.CallOption) (*SaleUpdateResponse, error) {
	out := new(SaleUpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Delete(ctx context.Context, in *SaleDeleteRequest, opts ...grpc.CallOption) (*SaleDeleteResponse, error) {
	out := new(SaleDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) ListSaleItemsByUser(ctx context.Context, in *ListSaleItemsByUserRequest, opts ...grpc.CallOption) (*ListSaleItemsByUserResponse, error) {
	out := new(ListSaleItemsByUserResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleService/ListSaleItemsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) ListAvailableSaleItemsByUser(ctx context.Context, in *ListAvailableSaleItemsByUserRequest, opts ...grpc.CallOption) (*ListAvailableSaleItemsByUserResponse, error) {
	out := new(ListAvailableSaleItemsByUserResponse)
	err := c.cc.Invoke(ctx, "/proto.SaleService/ListAvailableSaleItemsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleServiceServer is the server API for SaleService service.
// All implementations must embed UnimplementedSaleServiceServer
// for forward compatibility
type SaleServiceServer interface {
	Create(context.Context, *SaleCreateRequest) (*SaleCreateResponse, error)
	Get(context.Context, *SaleGetRequest) (*SaleGetResponse, error)
	List(context.Context, *SaleListRequest) (*SaleListResponse, error)
	Update(context.Context, *SaleUpdateRequest) (*SaleUpdateResponse, error)
	Delete(context.Context, *SaleDeleteRequest) (*SaleDeleteResponse, error)
	ListSaleItemsByUser(context.Context, *ListSaleItemsByUserRequest) (*ListSaleItemsByUserResponse, error)
	ListAvailableSaleItemsByUser(context.Context, *ListAvailableSaleItemsByUserRequest) (*ListAvailableSaleItemsByUserResponse, error)
	mustEmbedUnimplementedSaleServiceServer()
}

// UnimplementedSaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSaleServiceServer struct {
}

func (UnimplementedSaleServiceServer) Create(context.Context, *SaleCreateRequest) (*SaleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSaleServiceServer) Get(context.Context, *SaleGetRequest) (*SaleGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSaleServiceServer) List(context.Context, *SaleListRequest) (*SaleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSaleServiceServer) Update(context.Context, *SaleUpdateRequest) (*SaleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSaleServiceServer) Delete(context.Context, *SaleDeleteRequest) (*SaleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSaleServiceServer) ListSaleItemsByUser(context.Context, *ListSaleItemsByUserRequest) (*ListSaleItemsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSaleItemsByUser not implemented")
}
func (UnimplementedSaleServiceServer) ListAvailableSaleItemsByUser(context.Context, *ListAvailableSaleItemsByUserRequest) (*ListAvailableSaleItemsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableSaleItemsByUser not implemented")
}
func (UnimplementedSaleServiceServer) mustEmbedUnimplementedSaleServiceServer() {}

// UnsafeSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleServiceServer will
// result in compilation errors.
type UnsafeSaleServiceServer interface {
	mustEmbedUnimplementedSaleServiceServer()
}

func RegisterSaleServiceServer(s grpc.ServiceRegistrar, srv SaleServiceServer) {
	s.RegisterService(&SaleService_ServiceDesc, srv)
}

func _SaleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Create(ctx, req.(*SaleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Get(ctx, req.(*SaleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).List(ctx, req.(*SaleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Update(ctx, req.(*SaleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Delete(ctx, req.(*SaleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_ListSaleItemsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSaleItemsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).ListSaleItemsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleService/ListSaleItemsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).ListSaleItemsByUser(ctx, req.(*ListSaleItemsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_ListAvailableSaleItemsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableSaleItemsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).ListAvailableSaleItemsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaleService/ListAvailableSaleItemsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).ListAvailableSaleItemsByUser(ctx, req.(*ListAvailableSaleItemsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleService_ServiceDesc is the grpc.ServiceDesc for SaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SaleService",
	HandlerType: (*SaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SaleService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SaleService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SaleService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SaleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SaleService_Delete_Handler,
		},
		{
			MethodName: "ListSaleItemsByUser",
			Handler:    _SaleService_ListSaleItemsByUser_Handler,
		},
		{
			MethodName: "ListAvailableSaleItemsByUser",
			Handler:    _SaleService_ListAvailableSaleItemsByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sale.proto",
}
