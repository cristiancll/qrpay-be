// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: orderItem.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderItemServiceClient is the client API for OrderItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderItemServiceClient interface {
	Create(ctx context.Context, in *OrderItemCreateRequest, opts ...grpc.CallOption) (*OrderItemCreateResponse, error)
	Update(ctx context.Context, in *OrderItemUpdateRequest, opts ...grpc.CallOption) (*OrderItemUpdateResponse, error)
	Delete(ctx context.Context, in *OrderItemDeleteRequest, opts ...grpc.CallOption) (*OrderItemDeleteResponse, error)
	Get(ctx context.Context, in *OrderItemGetRequest, opts ...grpc.CallOption) (*OrderItemGetResponse, error)
	List(ctx context.Context, in *OrderItemListRequest, opts ...grpc.CallOption) (*OrderItemListResponse, error)
}

type orderItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderItemServiceClient(cc grpc.ClientConnInterface) OrderItemServiceClient {
	return &orderItemServiceClient{cc}
}

func (c *orderItemServiceClient) Create(ctx context.Context, in *OrderItemCreateRequest, opts ...grpc.CallOption) (*OrderItemCreateResponse, error) {
	out := new(OrderItemCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderItemService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) Update(ctx context.Context, in *OrderItemUpdateRequest, opts ...grpc.CallOption) (*OrderItemUpdateResponse, error) {
	out := new(OrderItemUpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderItemService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) Delete(ctx context.Context, in *OrderItemDeleteRequest, opts ...grpc.CallOption) (*OrderItemDeleteResponse, error) {
	out := new(OrderItemDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderItemService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) Get(ctx context.Context, in *OrderItemGetRequest, opts ...grpc.CallOption) (*OrderItemGetResponse, error) {
	out := new(OrderItemGetResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderItemService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) List(ctx context.Context, in *OrderItemListRequest, opts ...grpc.CallOption) (*OrderItemListResponse, error) {
	out := new(OrderItemListResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderItemService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderItemServiceServer is the server API for OrderItemService service.
// All implementations must embed UnimplementedOrderItemServiceServer
// for forward compatibility
type OrderItemServiceServer interface {
	Create(context.Context, *OrderItemCreateRequest) (*OrderItemCreateResponse, error)
	Update(context.Context, *OrderItemUpdateRequest) (*OrderItemUpdateResponse, error)
	Delete(context.Context, *OrderItemDeleteRequest) (*OrderItemDeleteResponse, error)
	Get(context.Context, *OrderItemGetRequest) (*OrderItemGetResponse, error)
	List(context.Context, *OrderItemListRequest) (*OrderItemListResponse, error)
	mustEmbedUnimplementedOrderItemServiceServer()
}

// UnimplementedOrderItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderItemServiceServer struct {
}

func (UnimplementedOrderItemServiceServer) Create(context.Context, *OrderItemCreateRequest) (*OrderItemCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderItemServiceServer) Update(context.Context, *OrderItemUpdateRequest) (*OrderItemUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderItemServiceServer) Delete(context.Context, *OrderItemDeleteRequest) (*OrderItemDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrderItemServiceServer) Get(context.Context, *OrderItemGetRequest) (*OrderItemGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOrderItemServiceServer) List(context.Context, *OrderItemListRequest) (*OrderItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrderItemServiceServer) mustEmbedUnimplementedOrderItemServiceServer() {}

// UnsafeOrderItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderItemServiceServer will
// result in compilation errors.
type UnsafeOrderItemServiceServer interface {
	mustEmbedUnimplementedOrderItemServiceServer()
}

func RegisterOrderItemServiceServer(s grpc.ServiceRegistrar, srv OrderItemServiceServer) {
	s.RegisterService(&OrderItemService_ServiceDesc, srv)
}

func _OrderItemService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderItemService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).Create(ctx, req.(*OrderItemCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderItemService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).Update(ctx, req.(*OrderItemUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderItemService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).Delete(ctx, req.(*OrderItemDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderItemService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).Get(ctx, req.(*OrderItemGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderItemService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).List(ctx, req.(*OrderItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderItemService_ServiceDesc is the grpc.ServiceDesc for OrderItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrderItemService",
	HandlerType: (*OrderItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderItemService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderItemService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrderItemService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OrderItemService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OrderItemService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orderItem.proto",
}
